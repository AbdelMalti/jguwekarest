{
  "swagger": "2.0",
  "info": {
    "description": "REST API webservice for weka. \n",
    "version": "0.0.1",
    "title": "WEKA REST Service",
    "contact": {
      "name": "JGU",
      "email": "rautenberg@uni-mainz.de",
      "url": "https://uni-mainz.de"
    },
    "license": {
      "name": "GNU General Public License 3",
      "url": "https://www.gnu.org/licenses/gpl-3.0.de.html"
    }
  },
  "host": "tum.in-silico.de",
  "externalDocs": {
    "description": "desc here ...\n",
    "url": "https://github.com/OpenRiskNet/"
  },
  "basePath": "/OpenTox/",
  "schemes": [
    "https"
  ],
  "paths": {
    "/algorithm": {
      "get": {
        "tags": [
          "algorithm"
        ],
        "description": "Get a list of all algorithms",
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "description": "requested Content-Type",
            "required": true,
            "type": "string",
            "enum": [
              "text/uri-list",
              "application/json"
            ]
          },
          {
            "$ref": "#/parameters/subjectid"
          }
        ],
        "produces": [
          "text/uri-list",
          "application/json"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/algorithm/{algorithmname}": {
      "get": {
        "tags": [
          "algorithm"
        ],
        "description": "Get algorithm representation",
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "description": "requested Content-Type",
            "required": true,
            "type": "string",
            "enum": [
              "application/json"
            ]
          },
          {
            "$ref": "#/parameters/algorithmname"
          },
          {
            "$ref": "#/parameters/subjectid"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          }
        }
      },
      "post": {
        "tags": [
          "algorithm"
        ],
        "description": "Train data on algorithm",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "identifier",
            "in": "formData",
            "description": "SMILES identifier or Nanoparticle URI or comma separated list of SMILES  identifiers or Nanoparticle URI",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/algorithmname"
          },
          {
            "$ref": "#/parameters/subjectid"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          }
        }
      }
    },
    "/algorithm/kNNclassification": {
      "post": {
        "tags": [
          "algorithm"
        ],
        "description": "K-nearest neighbours classifier.",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "prediction_feature",
            "in": "formData",
            "description": "URI of the feature to predict",
            "required": true,
            "type": "string"
          },
          {
            "name": "windowSize",
            "in": "formData",
            "description": "Gets the maximum number of instances allowed in the training pool. The addition of new instances above this value will result in old instances being removed. A value of 0 signifies no limit to the number of training instances. Must be 0 or 1 (Default: 0).",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "maximum": 1
          },
          {
            "name": "KNN",
            "in": "formData",
            "description": "The number of neighbors to use. Must be an integer greater than 0 (Default: 1).",
            "required": false,
            "type": "integer",
            "default": 1,
            "minimum": 0,
            "maximum": 1
          },
          {
            "name": "crossValidate",
            "in": "formData",
            "description": "Whether hold-one-out cross-validation will be used to select the best k value. Must be 0 or 1 (Default: 0).",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "maximum": 1
          },
          {
            "name": "dataset_uri",
            "in": "formData",
            "description": "URI of the dataset to be used.",
            "required": true,
            "type": "string"
          },
          {
            "name": "distanceWeighting",
            "in": "formData",
            "description": "May be 0 for no distance weighting, I for 1/distance or F for 1-distance. Must be 0, I or F (Default: 0).",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "maximum": 1
          },
          {
            "name": "meanSquared",
            "in": "formData",
            "description": "Whether the mean squared error is used rather than mean absolute error when doing cross-validation for regression problems. Must be 0 or 1 (Default: 0).",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "maximum": 1
          },
          {
            "name": "nearestNeighbourSearchAlgorithm",
            "in": "formData",
            "description": "he nearest neighbour search algorithm to use (Default: weka.core.neighboursearch.LinearNNSearch). Fixed.",
            "required": false,
            "type": "string",
            "default": "LinearNNSearch"
          },
          {
            "name": "dataset_service",
            "in": "formData",
            "description": "URI of the data service to be used.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/subjectid"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          }
        }
      }
    },
    "/api/api.json": {
      "get": {
        "tags": [
          "api"
        ],
        "description": "Get swagger api in JSON",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    }
  },
  "parameters": {
    "id": {
      "name": "id",
      "in": "path",
      "description": "id",
      "required": true,
      "type": "string"
    },
    "algorithmname": {
      "name": "algorithmname",
      "in": "path",
      "description": "name of an algorithm",
      "required": true,
      "type": "string"
    },
    "InChI": {
      "name": "InChI",
      "in": "path",
      "description": "InChI String",
      "required": true,
      "type": "string"
    },
    "valtype": {
      "name": "validationtype",
      "in": "path",
      "description": "validation type",
      "required": true,
      "type": "string"
    },
    "subjectid": {
      "in": "header",
      "name": "subjectid",
      "description": "authorization token",
      "required": false,
      "type": "string"
    }
  },
  "responses": {
    "200": {
      "description": "OK"
    },
    "400": {
      "description": "Bad Request"
    },
    "401": {
      "description": "Unauthorized"
    },
    "403": {
      "description": "Forbidden"
    },
    "404": {
      "description": "Resource Not Found"
    },
    "500": {
      "description": "Server Error"
    }
  },
  "tags": [
    {
      "name": "algorithm",
      "description": "Algorithm"
    },
    {
      "name": "api",
      "description": "Swagger API representation in JSON"
    },
    {
      "name": "authentication",
      "description": "minimal Authentication service"
    },
    {
      "name": "model",
      "description": "Model Service"
    },
    {
      "name": "dataset",
      "description": "Dataset"
    },
    {
      "name": "validation",
      "description": "Validation"
    }
  ]
}